# -*- coding: utf-8 -*-
"""Python_Crash_Course.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1us4yvUg8io-dpQjnELUuzXwVpEmSyXwJ

# Python Crash Course

# DataTypes
"""

# print the integer
1

# print the float
1.0

# Use Type() to find the datatype
type(1)

# print string
print("Jungkook")

"""## Basic Arithematic Operations"""

# Addition
1+2

# Subtraction
2-1

# Multiplication
2*3

# Division
10/5

# Modules
10%5

# Power
2**4

# Floor Division
10//5

"""## Print Strings"""

# Print the string
'single quotes'

# Print the string
"double quotes"

# Print
print("Jungkook")

"""## Formating using format()"""

# Formating
print("My Name is {} and i am from {} group in South Korea".format("Jungkook Jeon","BTS"))

# Formating
print("My Name is {x} and I am the {y}th member of BTS group in South Korea".format(x="Jungkook Jeon",y=7))

"""## List and Accesing elements in the list

**List :**It is a sequence of items.Lists are used to store multiple items in a single variable.
Lists are **Mutable** that is they can be modified.
List **contains duplicate values**.
Lists are **Ordered**.
"""

# List
[1,2,3]

# List with different datatypes
[1,'a']

"""**Variables** are naming given for a value"""

# Using Variables
mylist = [1,2,3,4]
print(mylist)

"""**Accessing the Values **from the list by using the **Indexing it starts from 0**."""

# Access the number 3 from the mylist
mylist[2]

"""**Append() :** This is used to insert an element to the end of the list"""

# Update the list by adding 5 to it using Append()
mylist.append(5)
print(mylist)

"""Update the list using the Indexing"""

# Update the mylist number 3 to Jungkook
mylist[2] = "Jungkook"
print(mylist)

"""### Nested Lists

**Nested List :**List within a list is called Nested List.
"""

# Nested List
mylist = [1,2,3,[4,"Jungkook",[5,6]]]
print(mylist)

"""Accessing the nested list"""

# Accessing the elements
mylist[1]

# Accessing the elements from mylist
mylist[3]

# Accessing the elements from mylist's nested list
mylist[3][1]

# Accessing the elements from mylist's nested list's nested list
mylist[3][2]

# Accessing the elements from mylist's nested list's nested list
mylist[3][2][0]

"""## Dictionaries

**Dictionaries :**Dictionaries are used to store data values in **key:value pairs**. A dictionary is a collection which is **unordered**,changeable and **do not allow duplicates**. they are **Mutable**.
"""

# Print a dictionary
dict = {"key1" : "value1", "key2" : "value2"}
print(dict)

# Access the values in an dictionary
dict["key2"]

"""## Boolean

**True** : True value is 1.
**False** : False value is 0.
"""

True

False

"""## Tuples

**Tuple :** Python tuples are a type of data structure that is very **similar to lists**. The main difference between the two is that **tuples are immutable**, meaning they cannot be changed once they are created.
"""

# print a tuple
tup = (1,2,3)
print(tup)

# Access an element in a tuple
print(tup[1])

# Access an element in a tuple
tup[1]

"""## Sets

**Sets :**Set is a data type in python used to store several items in a single variable. It makes picks and displays unique values from the duplicates. In other words it d**isplays distinct values from duplicates**. It is **immutable**.
"""

# print a set
sets = {1,2,3}
print(sets)

"""# Operators and Control Flow

## Relative operators
"""

# Greater than
5 > 1

# Greater than or equal to
5 >= 5

# Less than
1 < 5

# Less than or equal to
1 <= 1

# Comparision operator
'a' == 'a'

# Comparision operator
'a' == 'b'

# Assignment operator
x = 1
y = 2
x+y

"""## Logical operators

**and : Both the conditions should be True**. else it is false.


*   1 and 1 = 1
*   0 and 0 = 0

*   1 and 0 = 0
*   0 and 1 = 0
"""

# and condition true
(1==1) and ('a'== 'a')

# and condition false
(1==0) and ('a'== 'a')

"""**or : Any one of the conditions should be True**.else it is false.

*   1 or 1 = 1
*   0 or 0 = 0

*   1 or 0 = 1
*   0 or 1 = 0




"""

# or condition true
(1==2) or ('a'== 'a')

# or condition false
(1==2) or ('a'== 'b')

"""**not : It says True or False.**"""

!(0)

!(1)

"""## if conditions"""

# if statement
if 1==1:
  print("hello")

"""## elif conditions"""

# elif statements for multiple conditions
if 1==0:
  print("hello")
elif 1==1:
  print("Jungkook")
else:
  print("BTS")

"""## if-Else conditions"""

# if-else statement
if 1==0:
  print("hello")
else:
  print("BTS")

"""## For Loop"""

# list is printed
x = [1,2,3,4,5]
print(x)

# For loop
for i in x:
  print(i)

# For loop
for i in range(2,5):
  print(i)

"""## While Loop"""

# list is printed
x = [1,2,3,4,5]
print(x)

# while loop
i = 1
while i < 5:
  print("i is {}".format(i))
  i+=1

"""## range()"""

# range()
range(5)

"""**Typecasting :**This is to convert a datatype to another type."""

# Type cast to list
list(range(5))

"""**Range :** range(start,stop,step)"""

# range(start,stop,step)
list(range(2,10,2))

"""## List Comprehension"""

# No list comprehension
x = [1,2,3,4,5,6,7]
out = []
for num in x:
  out.append(num**2)
print(out)

# list comprehension
[num**2 for num in x]

"""# Functions

**Functions :**This is to create our own user defined function for ease
"""

# create a function
def my_func():
  print("hello")

# call the function
my_func()

# create a function with parameter
def my_func(name):
  print("hello "+name)

# call the function
my_func("Jungkook")

# create a function with parameter
def my_func(name="Taehyung"):
  print("hello "+name)

# call the function with parameter
my_func("Jungkook")

# call the function without parameter
my_func()

"""## using return"""

# create a function
def square(x):
  return x**2

# call the function
result = square(2)

result

"""## In-Built Functions"""

# create a string
string = "Hi i am Jungkook"

"""**lower() :** converts upper case to lower case"""

# lower
string.lower()

"""**upper() :** converts lower case to upper case"""

# upper
string.upper()

"""**split() :** splits in place of whitespaces"""

# split
string.split()

# create a dictionary
dict = {"key1":"value1","key2":"value2"}

"""**keys() :** prints the key in the dictionary"""

# Access the keys in the dictionary
dict.keys()

"""**items() :**prints the key and value in the dictionary"""

# Access the keys and values in the dictionary
dict.items()

"""**pop() :** removes an element from the list"""

# create a list
mylist = [1,2,3,4,5,6,7]

# pop the last element
last = mylist.pop()

# print mylist
print(mylist)

# print the last value that was popped
last

# pop the first element
first = mylist.pop(0)

# print mylist
print(mylist)

# print the first value that was popped
first

"""**in :** It is to check if the value mentioned is present or not."""

'x' in [1,2,3,4,5,6,7]

1 in [1,2,3,4,5,6,7]

2 in mylist