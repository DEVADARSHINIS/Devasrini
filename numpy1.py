# -*- coding: utf-8 -*-
"""NumPy1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1m2HRJoL31tLjLo-cqUneNI3dLJiTFpo1

## NumPy Library

## Creation of NumPy Array

**NumPy Library :**This is a library that allows us to work with and create multi-dimensional array.
"""

# Loading the NumPy Library
import numpy as np

"""**Creating a NumPy Array using NumPy**"""

# Create a List
mylist = [1,2,3,4,5]
print(mylist)

# Create an Array using NumPy
np.array(mylist)

# Create an Array
np.array([6,7,8,9])

"""### Nested List to Array gets converted to Matrix 2D"""

# Create an matrix using NumPy
mylist = [[1,2,3],[4,5,6],[7,8,9]]
print(mylist)

# Create an Array that displays as matrix this happens for nested list
np.array(mylist)

"""**type() :** Used to find the datatype"""

# To find the type
t = np.array(mylist)
type(t)

"""### Creating Array using arange()

**arange() :**This In-Built Function is similar to range(start , stop , step).Displays range of Values.**This is used to create a range of array.**
"""

# Similar to range()
np.arange(0,10)

# Similar to range()
np.arange(0,101,2)

"""### Creating Array with Zeros()"""

# Create Array with zeros
np.zeros(5)

# Create Array with zeros 2D
np.zeros((2,5))

# Create Array with zeros
np.zeros(5,dtype="int16")

"""### Creating Array using ones()"""

# Create Array with ones
np.ones(5)

# Create Array with ones 3D
np.ones((2,5,4))

"""### Create Identity Matrix"""

# Create Identity Matrix using identity()
np.identity(5)

# Create Identity Matrix using eye()
np.eye(5)

"""### Linspace()

**Linspace() :** This splits the values equally in a given range **linspace(start , stop , number of numbers needed between the start and stop)**
"""

# Create the Linspace Array
np.linspace(0,5,21)

# Create the Linspace Array
len(np.linspace(0,5,21))

"""### Random Values

**random.rand() :**This Generates random values to an array that is a uniform distribution.
"""

# Create a random Array
np.random.rand(0,10)

# Create a random Array
np.random.rand(10)

"""**random.randint() :**The randint(start , end , size).numpy. random. rand() from a uniform distribution (in the range [0,1))"""

# Create a random Array
np.random.randint(0,20,10)

# Create a random Array nested
np.random.randint(0,20,(2,4))

"""**random.randn() :** randn generates samples from the normal distribution"""

# Create a random Array
np.random.randn(10)

"""### seed()

**seed() :**seed is a function in the NumPy library that sets the seed for generating random numbers
"""

# set the seed value
np.random.seed(42)
np.random.rand(5)

# arange()
arr = np.arange(0,25)
arr

"""**reshape() :**This is to reshape the array"""

# Reshape()
arr.reshape(5,5)

"""**max() :** Finds maximum value"""

# Maximum
arr.max()

"""**min() :**Finds minimum value"""

# Minimum
arr.min()

"""**sum() :**Finds the total"""

# Sum
arr.sum()

# Create an Array
arr = np.random.randint(0,101,10)
arr

"""**argmax() :**This gives the index in which the maximum number is present."""

# find the index that has maximum value
arr.argmax()

"""**argmin() :**This gives the index in which the minimum number is present."""

# find the index that has minimum value
arr.argmin()

"""**dtype :**Finds the datatype"""

# to find the datatype
arr.dtype

"""**shape :**It prints the number of rows and columns in an array."""

# shape function
arr.shape

# reshape the array
a = arr.reshape(2,5)
a

# shape
a.shape

"""# Indexing in NumPy Array

### Indexing in 1D
"""

# Create an array
arr = np.arange(1,11)
arr

# Get the element 7 from arr
arr[6]

"""**Slicing/Broadcasting Selection :**To access multiple values from the required position (start , stop) other name for this selection is called **Broadcasting Selection**"""

# Get elements from 1 to 5 in arr
arr[1:6]

# update the first 5 numbers in the array
arr[:5] = 100

# print the updated part
arr[:5]

# Print the updated array
arr

# Create the array again
arr = np.arange(1,11)
arr

# Copy the array in 'a'
a = arr.copy()
a

# update the 'a' array to 100
a[:] = 100

# print 'a'
a

# Print the original array it won't be toggled
print(arr)

"""### Indexing in 2D"""

# Create a 2D Array
arr = np.array([[1,2,3],[4,5,6],[7,8,9]])
arr

"""### Accessing a single element"""

# Accessing a single element 6
arr[1,2]

# Accessing a single element 6
arr[1][2]

"""### Accessing a Row"""

# Access the elements from array
# Get the Row
arr[0]

# Access the elements from array
# Get the Row
arr[1:]

"""### Accessing a Column"""

# Access the elements from array
# Get the column
arr[0:3,2]

# Access the elements from array
# Get the column
arr[0:2,1:]

# Reshape in the arange()
array1 = np.arange(16).reshape(4,4)
array1

# Accessing elements
array1[0:2, 1:3]

"""### Comparison Operation"""

# Creating an Array
arr = np.arange(1,11)
print(arr)

# Comparison operation for an Array
arr > 4

# Comparison operation for an Array
bool_arr = arr > 4
bool_arr

# the array of True values
arr[bool_arr]

# the array of True values alternative way
arr[arr > 4]

# Get the number of true values using len()
len(arr[arr>4])

"""#Universal Operations in NumPy Array

### Arithematic Operations
"""

# Create an Array
arr = np.arange(0,11)
arr

# Addition
arr + 2

# Addition
arr + arr

# subtraction
arr - arr

# Multiplication
arr * arr

"""In **Division** we will get a warning in NumPy while dividing **0/0 = nan (not any number)**"""

# division
arr / arr

"""**1/0 gives division by zero error** in python but in NumPy
on dividing 1/arr that has **1/0 will give - inf that is infinity**
"""

# division
1 / arr

"""### universal operators"""

# Create a 2D array
arr = np.arange(0,25).reshape(5,5)
arr

# get the sum() for the 2D array
arr.sum()

# get the sum of the 2D Array Column-wise
arr.sum(axis=0)

# get the sum of the 2D Array Row-wise
arr.sum(axis=1)

# get the sin()
np.sin(arr)

# get the cos()
np.cos(arr)

# get the tan()
np.tan(arr)

# get the log()
np.log(arr)

"""### Stastical Operations"""

# get the mean for the above 2D Array
arr.mean()

# get the variance
arr.var()

# get the standard deviation
arr.std()